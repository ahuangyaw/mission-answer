# 公共配置文件
spring:
  application:
    name: mission-answer-backend
  # 默认 dev 环境
  profiles:
    active: dev
  # 支持 swagger3
  mvc:
    path match:
      matching-strategy: ant_path_matcher
  # session 配置
  session:
    # todo 取消注释开启分布式 session（须先配置 Redis）
    # store-type: redis
    # 30 天过期
    timeout: 2592000
  # 数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/mission_answer
    username: root
    password: 123456
  # Redis 配置
  redis:
    database: 1
    host: localhost
    port: 6379
    timeout: 5000
  # 文件上传
  servlet:
    multipart:
      # 启动开关
      enabled: true
      # 文件大小限制
      max-file-size: 50MB
      # 限制整个请求的大小，包括所有文件和其他部分
      max-request-size: 100MB
      
  # 分库分表配置
  shardingsphere:
    #数据源配置
    datasource:
      # 多数据源以逗号隔开即可
      names: mission_answer
      mission_answer:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/mission_answer?allowPublicKeyRetrieval=true&useSSL=false&autoReconnect=true&characterEncoding=utf8
        username: root
        password: 123456
    # 规则配置
    rules:
      sharding:
        # 分片算法配置
        sharding-algorithms:
          # 自定义分片规则名
          answer-table-inline:
            ## inline 类型是简单的配置文件里面就能写的类型，其他还有自定义类等等
            type: INLINE
            props:
              algorithm-expression: user_answer_$->{appId % 2}
        tables:
          user_answer:
            actual-data-nodes: mission_answer.user_answer_$->{0..1}
            # 分表策略
            table-strategy:
              standard:
                sharding-column: appId
                sharding-algorithm-name: answer-table-inline
  
  
server:
  address: 0.0.0.0
  port: 8101
  servlet:
    context-path: /api
    # cookie 30 天过期
    session:
      cookie:
        max-age: 2592000
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete # 全局逻辑删除的实体字段名
      logic-delete-value: 1 # 逻辑已删除值（默认为 1）
      logic-not-delete-value: 0 # 逻辑未删除值（默认为 0）
# 对象存储
# todo 需替换配置
cos:
  client:
    accessKey: M9EOLTH2OKWR7NQPKSIE
    secretKey: 1unqUqQigxVbSB82qkUfBX28gLKEfxABahRxR646
    region: http://47.120.42.45:9000
    bucket: file
# 接口文档配置
knife4j:
  enable: true
  openapi:
    title: "接口文档"
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - asia.huangzhitao.missionAnswerBackend.controller

# AI 配置
ai:
  apiKey: 416128eea7bff188f5c5e4f503193d9e.SMKQ1mXGqEo4W0j3

# 对象存储服务配置
minio:
# MinIO自搭建对象存储服务
  # todo 存储服务域名
  endpoint: http://47.120.42.45:9000
  accessKey: M9EOLTH2OKWR7NQPKSIE
  secretKey: 1unqUqQigxVbSB82qkUfBX28gLKEfxABahRxR646
  bucketName: file   #存储桶名称